apiVersion: authorino.kuadrant.io/v1beta1
kind: AuthConfig
metadata:
  name: e2e-test
spec:
  hosts:
  - talker-api-authorino.127.0.0.1.nip.io

  patterns:
    admin-path:
    - selector: context.request.http.path
      operator: matches
      value: ^/admin(/.*)?$
    resource-path:
    - selector: context.request.http.path
      operator: matches
      value: ^/greetings/\d+$

  identity:
  - name: k8s-auth
    kubernetes:
      audiences:
      - https://kubernetes.default.svc.cluster.local
    extendedProperties:
    - name: kubernetes-rbac
      value: true
    - name: username
      valueFrom: { authJSON: auth.identity.sub }
  - name: api-key
    apiKey:
      labelSelectors:
        app: talker-api
    credentials:
      in: custom_header
      keySelector: X-API-KEY
    extendedProperties:
    - name: kubernetes-rbac
      value: true
    - name: username
      valueFrom: { authJSON: auth.identity.metadata.annotations.username }
  - name: keycloak
    oidc:
      endpoint: http://keycloak.authorino.svc.cluster.local:8080/auth/realms/kuadrant
      ttl: 60
    extendedProperties:
    - name: jwt-rbac
      value: true
    - name: username
      valueFrom: { authJSON: auth.identity.preferred_username }
    - name: roles
      valueFrom: { authJSON: auth.identity.realm_access.roles }
  - name: oauth2-introspection
    oauth2:
      tokenIntrospectionUrl: http://keycloak.authorino.svc.cluster.local:8080/auth/realms/kuadrant/protocol/openid-connect/token/introspect
      tokenTypeHint: requesting_party_token
      credentialsRef:
        name: oauth2-token-introspection-credentials-keycloak
    credentials:
      in: authorization_header
      keySelector: Opaque
    extendedProperties:
    - name: jwt-rbac
      value: true
    - name: username
      valueFrom: { authJSON: auth.identity.preferred_username }
    - name: roles
      valueFrom: { authJSON: auth.identity.realm_access.roles }
    cache:
      key:
        valueFrom: { authJSON: context.request.http.headers.authorization }
  - name: anonymous
    anonymous: {}
    priority: 1
    when:
    - selector: context.request.http.method
      operator: eq
      value: GET
    - selector: context.request.http.path
      operator: matches
      value: ^/$
    extendedProperties:
    - name: username
      value: global

  metadata:
  - name: geo-info
    http:
      endpoint: http://ip-location.authorino.svc.cluster.local:3000/{context.request.http.headers.x-forwarded-for.@extract:{"sep":","}}
      method: GET
      headers:
      - name: Accept
        value: application/json
    cache:
      key:
        valueFrom: { authJSON: "context.request.http.headers.x-forwarded-for.@extract:{\"sep\":\",\"}" }
  - name: user-info
    userInfo:
      identitySource: keycloak
    cache:
      key:
        valueFrom: { authJSON: context.request.http.headers.authorization }
  - name: resource-info
    when:
    - patternRef: resource-path
    uma:
      endpoint: http://keycloak.authorino.svc.cluster.local:8080/auth/realms/kuadrant
      credentialsRef:
        name: talker-api-uma-credentials
    cache:
      key:
        valueFrom: { authJSON: context.request.http.path }

  authorization:
  - name: allowed-methods
    opa:
      externalRegistry:
        endpoint: https://raw.githubusercontent.com/guicassolato/authorino-opa/main/allowed-methods.rego
        ttl: 300
  - name: geofence
    opa:
      inlineRego: |
        country = object.get(object.get(input.auth.metadata, "geo-info", {}), "country_iso_code", null)
        allow {
          allowed_countries := ["ES", "FR", "IT"]
          allowed_countries[_] == country
        }
      allValues: true
  - name: admin-kubernetes-rbac
    when:
    - patternRef: admin-path
    - selector: auth.identity.kubernetes-rbac
      operator: eq
      value: "true"
    kubernetes:
      user:
        valueFrom: { authJSON: auth.identity.username }
  - name: admin-jwt-rbac
    when:
    - patternRef: admin-path
    - selector: auth.identity.jwt-rbac
      operator: eq
      value: "true"
    json:
      rules:
      - selector: auth.identity.roles
        operator: incl
        value: admin
  - name: resource-owner
    when:
    - patternRef: resource-path
    opa:
      inlineRego: |
        allow {
          resource_attrs := object.get(input.auth.metadata, "resource-info", [])[0]
          resource_owner := object.get(object.get(resource_attrs, "owner", {}), "id", "")
          resource_owner == input.auth.identity.sub
        }
  - name: timestamp
    opa:
      inlineRego: |
        now = time.now_ns() / 1000000000
        allow = true
      allValues: true
    priority: 1

  response:
  - name: x-auth-data
    json:
      properties:
      - name: username
        valueFrom: { authJSON: auth.identity.username }
      - name: geo
        valueFrom: { authJSON: auth.metadata.geo-info }
      - name: timestamp
        valueFrom: { authJSON: auth.authorization.timestamp.now }
  - name: rate-limit-data
    wrapper: envoyDynamicMetadata
    wrapperKey: ext_auth_data
    json:
      properties:
      - name: username
        valueFrom: { authJSON: auth.identity.username }
  - name: wristband
    wristband:
      issuer: https://authorino-authorino-oidc.authorino.svc.cluster.local:8083/authorino/e2e-test/wristband
      tokenDuration: 300
      customClaims:
      - name: username
        valueFrom: { authJSON: auth.identity.username }
      - name: uri
        valueFrom: { authJSON: context.request.http.path }
      - name: scope
        valueFrom: { authJSON: context.request.http.method.@case:lower }
      signingKeyRefs:
        - name: wristband-signing-key
          algorithm: ES256
    when:
    - selector: auth.identity.anonymous
      operator: neq
      value: "true"

  denyWith:
    unauthenticated:
      message:
        value: "Authentication failed"
    unauthorized:
      message:
        value: "Access denied"
---
apiVersion: v1
kind: Secret
metadata:
  name: oauth2-token-introspection-credentials-keycloak
stringData:
  clientID: talker-api
  clientSecret: 523b92b6-625d-4e1e-a313-77e7a8ae4e88
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  name: talker-api-uma-credentials
stringData:
  clientID: talker-api
  clientSecret: 523b92b6-625d-4e1e-a313-77e7a8ae4e88
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  name: wristband-signing-key
stringData:
  key.pem: |
    -----BEGIN EC PRIVATE KEY-----
    MHcCAQEEIDHvuf81gVlWGo0hmXGTAnA/HVxGuH8vOc7/8jewcVvqoAoGCCqGSM49
    AwEHoUQDQgAETJf5NLVKplSYp95TOfhVPqvxvEibRyjrUZwwtpDuQZxJKDysoGwn
    cnUvHIu23SgW+Ee9lxSmZGhO4eTdQeKxMA==
    -----END EC PRIVATE KEY-----
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  name: bob-api-key
  labels:
    authorino.kuadrant.io/managed-by: authorino
    app: talker-api
  annotations:
    username: bob
stringData:
  api_key: ndyBzreUzF4zqDQsqSPMHkRhriEOtcRx
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  name: alice-api-key
  labels:
    authorino.kuadrant.io/managed-by: authorino
    app: talker-api
  annotations:
    username: alice
stringData:
  api_key: pR2zLorYFIYOE4LLiQAWMPIRei1YgRBy
type: Opaque
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: app-1-sa
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: app-2-sa
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: talker-api-admin
rules:
- nonResourceURLs: ["/admin*"]
  verbs: ["get", "post"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: talker-api-admins
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: talker-api-admin
subjects:
- kind: User
  name: bob
  namespace: bob
- kind: ServiceAccount
  name: app-1-sa
  namespace: authorino
