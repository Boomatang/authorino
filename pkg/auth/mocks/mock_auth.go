// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/auth/auth.go

// Package mock_auth is a generated GoMock package.
package mock_auth

import (
	reflect "reflect"

	envoy_service_auth_v3 "github.com/envoyproxy/go-control-plane/envoy/service/auth/v3"
	gomock "github.com/golang/mock/gomock"
	auth "github.com/kuadrant/authorino/pkg/auth"
	common "github.com/kuadrant/authorino/pkg/common"
	context "golang.org/x/net/context"
	v1 "k8s.io/api/core/v1"
	types "k8s.io/apimachinery/pkg/types"
)

// MockAuthPipeline is a mock of AuthPipeline interface.
type MockAuthPipeline struct {
	ctrl     *gomock.Controller
	recorder *MockAuthPipelineMockRecorder
}

// MockAuthPipelineMockRecorder is the mock recorder for MockAuthPipeline.
type MockAuthPipelineMockRecorder struct {
	mock *MockAuthPipeline
}

// NewMockAuthPipeline creates a new mock instance.
func NewMockAuthPipeline(ctrl *gomock.Controller) *MockAuthPipeline {
	mock := &MockAuthPipeline{ctrl: ctrl}
	mock.recorder = &MockAuthPipelineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthPipeline) EXPECT() *MockAuthPipelineMockRecorder {
	return m.recorder
}

// Evaluate mocks base method.
func (m *MockAuthPipeline) Evaluate() auth.AuthResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Evaluate")
	ret0, _ := ret[0].(auth.AuthResult)
	return ret0
}

// Evaluate indicates an expected call of Evaluate.
func (mr *MockAuthPipelineMockRecorder) Evaluate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Evaluate", reflect.TypeOf((*MockAuthPipeline)(nil).Evaluate))
}

// GetAPI mocks base method.
func (m *MockAuthPipeline) GetAPI() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPI")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// GetAPI indicates an expected call of GetAPI.
func (mr *MockAuthPipelineMockRecorder) GetAPI() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPI", reflect.TypeOf((*MockAuthPipeline)(nil).GetAPI))
}

// GetAuthorizationJSON mocks base method.
func (m *MockAuthPipeline) GetAuthorizationJSON() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorizationJSON")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAuthorizationJSON indicates an expected call of GetAuthorizationJSON.
func (mr *MockAuthPipelineMockRecorder) GetAuthorizationJSON() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizationJSON", reflect.TypeOf((*MockAuthPipeline)(nil).GetAuthorizationJSON))
}

// GetHttp mocks base method.
func (m *MockAuthPipeline) GetHttp() *envoy_service_auth_v3.AttributeContext_HttpRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHttp")
	ret0, _ := ret[0].(*envoy_service_auth_v3.AttributeContext_HttpRequest)
	return ret0
}

// GetHttp indicates an expected call of GetHttp.
func (mr *MockAuthPipelineMockRecorder) GetHttp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHttp", reflect.TypeOf((*MockAuthPipeline)(nil).GetHttp))
}

// GetRequest mocks base method.
func (m *MockAuthPipeline) GetRequest() *envoy_service_auth_v3.CheckRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequest")
	ret0, _ := ret[0].(*envoy_service_auth_v3.CheckRequest)
	return ret0
}

// GetRequest indicates an expected call of GetRequest.
func (mr *MockAuthPipelineMockRecorder) GetRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequest", reflect.TypeOf((*MockAuthPipeline)(nil).GetRequest))
}

// GetResolvedIdentity mocks base method.
func (m *MockAuthPipeline) GetResolvedIdentity() (interface{}, interface{}) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResolvedIdentity")
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(interface{})
	return ret0, ret1
}

// GetResolvedIdentity indicates an expected call of GetResolvedIdentity.
func (mr *MockAuthPipelineMockRecorder) GetResolvedIdentity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResolvedIdentity", reflect.TypeOf((*MockAuthPipeline)(nil).GetResolvedIdentity))
}

// MockAuthConfigEvaluator is a mock of AuthConfigEvaluator interface.
type MockAuthConfigEvaluator struct {
	ctrl     *gomock.Controller
	recorder *MockAuthConfigEvaluatorMockRecorder
}

// MockAuthConfigEvaluatorMockRecorder is the mock recorder for MockAuthConfigEvaluator.
type MockAuthConfigEvaluatorMockRecorder struct {
	mock *MockAuthConfigEvaluator
}

// NewMockAuthConfigEvaluator creates a new mock instance.
func NewMockAuthConfigEvaluator(ctrl *gomock.Controller) *MockAuthConfigEvaluator {
	mock := &MockAuthConfigEvaluator{ctrl: ctrl}
	mock.recorder = &MockAuthConfigEvaluatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthConfigEvaluator) EXPECT() *MockAuthConfigEvaluatorMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockAuthConfigEvaluator) Call(arg0 auth.AuthPipeline, arg1 context.Context) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", arg0, arg1)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call.
func (mr *MockAuthConfigEvaluatorMockRecorder) Call(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockAuthConfigEvaluator)(nil).Call), arg0, arg1)
}

// MockAuthConfigCleaner is a mock of AuthConfigCleaner interface.
type MockAuthConfigCleaner struct {
	ctrl     *gomock.Controller
	recorder *MockAuthConfigCleanerMockRecorder
}

// MockAuthConfigCleanerMockRecorder is the mock recorder for MockAuthConfigCleaner.
type MockAuthConfigCleanerMockRecorder struct {
	mock *MockAuthConfigCleaner
}

// NewMockAuthConfigCleaner creates a new mock instance.
func NewMockAuthConfigCleaner(ctrl *gomock.Controller) *MockAuthConfigCleaner {
	mock := &MockAuthConfigCleaner{ctrl: ctrl}
	mock.recorder = &MockAuthConfigCleanerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthConfigCleaner) EXPECT() *MockAuthConfigCleanerMockRecorder {
	return m.recorder
}

// Clean mocks base method.
func (m *MockAuthConfigCleaner) Clean(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clean", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Clean indicates an expected call of Clean.
func (mr *MockAuthConfigCleanerMockRecorder) Clean(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clean", reflect.TypeOf((*MockAuthConfigCleaner)(nil).Clean), arg0)
}

// MockNamedEvaluator is a mock of NamedEvaluator interface.
type MockNamedEvaluator struct {
	ctrl     *gomock.Controller
	recorder *MockNamedEvaluatorMockRecorder
}

// MockNamedEvaluatorMockRecorder is the mock recorder for MockNamedEvaluator.
type MockNamedEvaluatorMockRecorder struct {
	mock *MockNamedEvaluator
}

// NewMockNamedEvaluator creates a new mock instance.
func NewMockNamedEvaluator(ctrl *gomock.Controller) *MockNamedEvaluator {
	mock := &MockNamedEvaluator{ctrl: ctrl}
	mock.recorder = &MockNamedEvaluatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNamedEvaluator) EXPECT() *MockNamedEvaluatorMockRecorder {
	return m.recorder
}

// GetName mocks base method.
func (m *MockNamedEvaluator) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockNamedEvaluatorMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockNamedEvaluator)(nil).GetName))
}

// MockTypedEvaluator is a mock of TypedEvaluator interface.
type MockTypedEvaluator struct {
	ctrl     *gomock.Controller
	recorder *MockTypedEvaluatorMockRecorder
}

// MockTypedEvaluatorMockRecorder is the mock recorder for MockTypedEvaluator.
type MockTypedEvaluatorMockRecorder struct {
	mock *MockTypedEvaluator
}

// NewMockTypedEvaluator creates a new mock instance.
func NewMockTypedEvaluator(ctrl *gomock.Controller) *MockTypedEvaluator {
	mock := &MockTypedEvaluator{ctrl: ctrl}
	mock.recorder = &MockTypedEvaluatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTypedEvaluator) EXPECT() *MockTypedEvaluatorMockRecorder {
	return m.recorder
}

// GetType mocks base method.
func (m *MockTypedEvaluator) GetType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetType")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetType indicates an expected call of GetType.
func (mr *MockTypedEvaluatorMockRecorder) GetType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockTypedEvaluator)(nil).GetType))
}

// MockPrioritizable is a mock of Prioritizable interface.
type MockPrioritizable struct {
	ctrl     *gomock.Controller
	recorder *MockPrioritizableMockRecorder
}

// MockPrioritizableMockRecorder is the mock recorder for MockPrioritizable.
type MockPrioritizableMockRecorder struct {
	mock *MockPrioritizable
}

// NewMockPrioritizable creates a new mock instance.
func NewMockPrioritizable(ctrl *gomock.Controller) *MockPrioritizable {
	mock := &MockPrioritizable{ctrl: ctrl}
	mock.recorder = &MockPrioritizableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrioritizable) EXPECT() *MockPrioritizableMockRecorder {
	return m.recorder
}

// GetPriority mocks base method.
func (m *MockPrioritizable) GetPriority() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPriority")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetPriority indicates an expected call of GetPriority.
func (mr *MockPrioritizableMockRecorder) GetPriority() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPriority", reflect.TypeOf((*MockPrioritizable)(nil).GetPriority))
}

// MockConditionalEvaluator is a mock of ConditionalEvaluator interface.
type MockConditionalEvaluator struct {
	ctrl     *gomock.Controller
	recorder *MockConditionalEvaluatorMockRecorder
}

// MockConditionalEvaluatorMockRecorder is the mock recorder for MockConditionalEvaluator.
type MockConditionalEvaluatorMockRecorder struct {
	mock *MockConditionalEvaluator
}

// NewMockConditionalEvaluator creates a new mock instance.
func NewMockConditionalEvaluator(ctrl *gomock.Controller) *MockConditionalEvaluator {
	mock := &MockConditionalEvaluator{ctrl: ctrl}
	mock.recorder = &MockConditionalEvaluatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConditionalEvaluator) EXPECT() *MockConditionalEvaluatorMockRecorder {
	return m.recorder
}

// GetConditions mocks base method.
func (m *MockConditionalEvaluator) GetConditions() []common.JSONPatternMatchingRule {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConditions")
	ret0, _ := ret[0].([]common.JSONPatternMatchingRule)
	return ret0
}

// GetConditions indicates an expected call of GetConditions.
func (mr *MockConditionalEvaluatorMockRecorder) GetConditions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConditions", reflect.TypeOf((*MockConditionalEvaluator)(nil).GetConditions))
}

// MockIdentityConfigEvaluator is a mock of IdentityConfigEvaluator interface.
type MockIdentityConfigEvaluator struct {
	ctrl     *gomock.Controller
	recorder *MockIdentityConfigEvaluatorMockRecorder
}

// MockIdentityConfigEvaluatorMockRecorder is the mock recorder for MockIdentityConfigEvaluator.
type MockIdentityConfigEvaluatorMockRecorder struct {
	mock *MockIdentityConfigEvaluator
}

// NewMockIdentityConfigEvaluator creates a new mock instance.
func NewMockIdentityConfigEvaluator(ctrl *gomock.Controller) *MockIdentityConfigEvaluator {
	mock := &MockIdentityConfigEvaluator{ctrl: ctrl}
	mock.recorder = &MockIdentityConfigEvaluatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdentityConfigEvaluator) EXPECT() *MockIdentityConfigEvaluatorMockRecorder {
	return m.recorder
}

// GetAuthCredentials mocks base method.
func (m *MockIdentityConfigEvaluator) GetAuthCredentials() auth.AuthCredentials {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthCredentials")
	ret0, _ := ret[0].(auth.AuthCredentials)
	return ret0
}

// GetAuthCredentials indicates an expected call of GetAuthCredentials.
func (mr *MockIdentityConfigEvaluatorMockRecorder) GetAuthCredentials() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthCredentials", reflect.TypeOf((*MockIdentityConfigEvaluator)(nil).GetAuthCredentials))
}

// GetOIDC mocks base method.
func (m *MockIdentityConfigEvaluator) GetOIDC() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOIDC")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// GetOIDC indicates an expected call of GetOIDC.
func (mr *MockIdentityConfigEvaluatorMockRecorder) GetOIDC() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOIDC", reflect.TypeOf((*MockIdentityConfigEvaluator)(nil).GetOIDC))
}

// ResolveExtendedProperties mocks base method.
func (m *MockIdentityConfigEvaluator) ResolveExtendedProperties(arg0 auth.AuthPipeline) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveExtendedProperties", arg0)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveExtendedProperties indicates an expected call of ResolveExtendedProperties.
func (mr *MockIdentityConfigEvaluatorMockRecorder) ResolveExtendedProperties(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveExtendedProperties", reflect.TypeOf((*MockIdentityConfigEvaluator)(nil).ResolveExtendedProperties), arg0)
}

// MockAPIKeySecretFinder is a mock of APIKeySecretFinder interface.
type MockAPIKeySecretFinder struct {
	ctrl     *gomock.Controller
	recorder *MockAPIKeySecretFinderMockRecorder
}

// MockAPIKeySecretFinderMockRecorder is the mock recorder for MockAPIKeySecretFinder.
type MockAPIKeySecretFinderMockRecorder struct {
	mock *MockAPIKeySecretFinder
}

// NewMockAPIKeySecretFinder creates a new mock instance.
func NewMockAPIKeySecretFinder(ctrl *gomock.Controller) *MockAPIKeySecretFinder {
	mock := &MockAPIKeySecretFinder{ctrl: ctrl}
	mock.recorder = &MockAPIKeySecretFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPIKeySecretFinder) EXPECT() *MockAPIKeySecretFinderMockRecorder {
	return m.recorder
}

// FindSecretByName mocks base method.
func (m *MockAPIKeySecretFinder) FindSecretByName(arg0 types.NamespacedName) *v1.Secret {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSecretByName", arg0)
	ret0, _ := ret[0].(*v1.Secret)
	return ret0
}

// FindSecretByName indicates an expected call of FindSecretByName.
func (mr *MockAPIKeySecretFinderMockRecorder) FindSecretByName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSecretByName", reflect.TypeOf((*MockAPIKeySecretFinder)(nil).FindSecretByName), arg0)
}

// MockWristbandIssuer is a mock of WristbandIssuer interface.
type MockWristbandIssuer struct {
	ctrl     *gomock.Controller
	recorder *MockWristbandIssuerMockRecorder
}

// MockWristbandIssuerMockRecorder is the mock recorder for MockWristbandIssuer.
type MockWristbandIssuerMockRecorder struct {
	mock *MockWristbandIssuer
}

// NewMockWristbandIssuer creates a new mock instance.
func NewMockWristbandIssuer(ctrl *gomock.Controller) *MockWristbandIssuer {
	mock := &MockWristbandIssuer{ctrl: ctrl}
	mock.recorder = &MockWristbandIssuerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWristbandIssuer) EXPECT() *MockWristbandIssuerMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockWristbandIssuer) Call(arg0 auth.AuthPipeline, arg1 context.Context) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", arg0, arg1)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call.
func (mr *MockWristbandIssuerMockRecorder) Call(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockWristbandIssuer)(nil).Call), arg0, arg1)
}

// GetIssuer mocks base method.
func (m *MockWristbandIssuer) GetIssuer() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssuer")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetIssuer indicates an expected call of GetIssuer.
func (mr *MockWristbandIssuerMockRecorder) GetIssuer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssuer", reflect.TypeOf((*MockWristbandIssuer)(nil).GetIssuer))
}

// JWKS mocks base method.
func (m *MockWristbandIssuer) JWKS() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JWKS")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JWKS indicates an expected call of JWKS.
func (mr *MockWristbandIssuerMockRecorder) JWKS() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JWKS", reflect.TypeOf((*MockWristbandIssuer)(nil).JWKS))
}

// OpenIDConfig mocks base method.
func (m *MockWristbandIssuer) OpenIDConfig() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenIDConfig")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenIDConfig indicates an expected call of OpenIDConfig.
func (mr *MockWristbandIssuerMockRecorder) OpenIDConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenIDConfig", reflect.TypeOf((*MockWristbandIssuer)(nil).OpenIDConfig))
}

// MockResponseConfigEvaluator is a mock of ResponseConfigEvaluator interface.
type MockResponseConfigEvaluator struct {
	ctrl     *gomock.Controller
	recorder *MockResponseConfigEvaluatorMockRecorder
}

// MockResponseConfigEvaluatorMockRecorder is the mock recorder for MockResponseConfigEvaluator.
type MockResponseConfigEvaluatorMockRecorder struct {
	mock *MockResponseConfigEvaluator
}

// NewMockResponseConfigEvaluator creates a new mock instance.
func NewMockResponseConfigEvaluator(ctrl *gomock.Controller) *MockResponseConfigEvaluator {
	mock := &MockResponseConfigEvaluator{ctrl: ctrl}
	mock.recorder = &MockResponseConfigEvaluatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResponseConfigEvaluator) EXPECT() *MockResponseConfigEvaluatorMockRecorder {
	return m.recorder
}

// GetName mocks base method.
func (m *MockResponseConfigEvaluator) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockResponseConfigEvaluatorMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockResponseConfigEvaluator)(nil).GetName))
}

// GetWristbandIssuer mocks base method.
func (m *MockResponseConfigEvaluator) GetWristbandIssuer() auth.WristbandIssuer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWristbandIssuer")
	ret0, _ := ret[0].(auth.WristbandIssuer)
	return ret0
}

// GetWristbandIssuer indicates an expected call of GetWristbandIssuer.
func (mr *MockResponseConfigEvaluatorMockRecorder) GetWristbandIssuer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWristbandIssuer", reflect.TypeOf((*MockResponseConfigEvaluator)(nil).GetWristbandIssuer))
}
